#!/usr/bin/env python

import os
import time
import stat

from soundforest import normalized, SoundforestError
from soundforest.cli import Script, ScriptError
from soundfourest.tree import Tree, Album, Track

from pytunes import iTunesError
from pytunes.client import iTunesMusicTree
from pytunes.playlist import iTunesPlaylist

# How often we report something
PROGRESS_INTERVAL = 1000

script = Script('itunes-update', 'Update itunes library', subcommands=False)
script.add_argument('-i', '--itunes-directory', help='iTunes directory')
script.add_argument('-c', '--codec', help='Music library default codec')
script.add_argument('-l', '--music-path', help='Music library path')
script.add_argument('-p', '--position', type=int, help='Start from given position in library')
script.add_argument('-m', '--metadata', action='store_true', help='Update metadata')
args = script.parse_args()

script.log.info('Loading iTunes library playlist')
library = iTunesPlaylist('library')
if args.position:
    try:
        library.jump(args.position)
    except ValueError:
        script.exit(1,
            'Invalid position: %s (%d entries)' % (args.position, len(library))
        )
try:
    tree = iTunesMusicTree(itunes_path=args.itunes_directory, tree_path=args.music_path)
    tree.load()
    tree_paths = tree.realpaths

except iTunesError, emsg:
    script.exit(1, emsg)

except SoundforestError, emsg:
    script.exit(1, emsg)

processed = 0
progress_interval = PROGRESS_INTERVAL
progress_start = time.time()
start = time.time()
itunes_files = {}
script.log.info('Checking library files against itunes')

for entry in library:
    processed += 1
    if processed%progress_interval==0:
        progress_time = float(time.time()-progress_start)
        progress_rate = float(progress_interval/progress_time)
        script.log.info('Index %d (%d entries per second)' % (processed, progress_rate))
        progress_start = time.time()

    try:
        path = normalized(os.path.realpath(entry.path))

    except AttributeError:
        script.log.info('Removing invalid entry (no path defined)')
        library.delete(entry)
        continue

    if not tree_paths.has_key(path):
        if not os.path.isfile(path):
            script.log.info('Removing non-existing: "%s"' % path)
            library.delete(entry)

        else:
            script.log.info('File outside tree: %s' % path)

    elif not itunes_files.has_key(path):
        itunes_files[path] = entry
        if args.metadata:
            mtime = os.stat(path).st_mtime
            if int(entry.modification_date.strftime('%s')) >= mtime:
                continue

            song = Track(entry.path)
            if entry.syncTags(song):
                library.__next = entry.index

    else:
        script.log.info('Removing duplicate: %s' % entry.path)
        library.delete(entry)

loadtime = float(time.time()-start)
script.log.info('Checked %d files in %0.2f seconds' % (processed, loadtime))

start = time.time()
processed = 0
script.log.info('Checking itunes against library files')

if args.position is None:

    for path in sorted(tree_paths.keys()):

        if not itunes_files.has_key(path):
            script.log.info('Adding: %s' % path)
            try:
                library.add(path)
            except ValueError, e:
                print e

        processed += 1
        if processed%1000 == 0:
            script.log.debug('Processed: %d entries' % processed)

loadtime = float(time.time()-start)
script.log.info('Checked %d files in %0.2f seconds' % (processed, loadtime))

