#!/usr/bin/env python

import os
import sys
import glob
import time

REQUIRED_EGGS = (
    'darwinist',
    'systematic',
    'musa',
    'configobj',
    'pytunes',
    'setproctitle',
    'appscript',
    'lxml'
)
# Hack to get /usr/local site-packages to python path when launchctl'ed
pymajor = '.'.join(sys.version.split()[0].split('.')[:2])
libs = os.path.join('/usr/local/lib','python%s'%pymajor,'site-packages')
sys.path.insert(0,libs)
try:
    for egg in REQUIRED_EGGS:
        sys.path.insert(0,glob.glob('%s/%s-*' % (libs,egg))[-1])
except IndexError:
    pass

from lxml import etree as ET

from systematic.shell import Script,ScriptError
from pytunes.status import iTunesStatus
from darwinist.notification import NotificationClient

POLL_INTERVAL = 2
INFO_FORMAT = """%(started)s %(path)s"""
DEFAULT_PATH = os.path.expanduser('~/.itunes.log')

script = Script('itunesd')
script.add_argument('--xml-output',help='Output song info to XML file')
script.add_argument('--notify',action='store_true',help='Show notifications')
script.add_argument('-p','--path',default=DEFAULT_PATH,help='Log file path')
args = script.parse_args()

status = iTunesStatus()
nc = NotificationClient.alloc().init()

fd = open(args.path,'a')
last_reported = None
while True:
    (state,info) = status.next()

    script.log.debug('State %s info %s' % (state,info))
    if state in ['stopped','paused']:
        time.sleep(POLL_INTERVAL)
        continue

    if last_reported is not None and info['path']==last_reported:
        continue
    last_reported = info['path']

    # Write to log
    fd.write('%s\n' % (INFO_FORMAT % info))
    fd.flush()

    # Notify with mountain lion notification center
    if args.notify:
        nc.notify(info['name'],'by %s' % info['artist'],'from %s' % info['album'])

    # Optional XML output
    if args.xml_output:
        xml = ET.tostring(
           status.songinfo(xml_output=True,export_albumart=True),
            pretty_print=True,
            xml_declaration=True
        )
        try:
            open(os.path.expanduser(args.xml_output),'w').write(xml)
        except IOError,emsg:
            print 'Error writing XML file %s: %s' % (args.xml_output,emsg)

if args.xml_output:
    try:
        os.unlink(os.path.expanduser(args.xml_output))
    except IOError,emsg:
        print 'Error removing XML file %s: %s' % (args.xml_output,emsg)

fd.close()

